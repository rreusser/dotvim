snippet akqap
	/**
	 * @name HOLIDAY.${1:Module}-_${2:function}
	 * @function
	 * @description ${3}
	 */
	_$2 = function(${4}) {
		${5}
	},
snippet akqa
	/**
	 * @name HOLIDAY.${1:Module}-_${2:function}
	 * @exports HOLIDAY.$3-$2 as HOLIDAY.$1.$2
	 * @function
	 * @description ${3}
	 */
	_$2 = function(${4}) {
		${5}
	},
snippet jqimageonce
	$("${1:selector}").one('load', function() {
		${2:stuff}
	}).each(function() {
	    if(this.complete) $(this).load();
	});
snippet jqip
	;(function ($, window) {

			$.fn.${1:plugin_name} = function ( options ) {
					var defaults = {
							${2:property: value}
					};

					this.options = $.extend( {}, defaults, options) ;

					return this.each(function (el) {
							var $el = $(el);
							${3}
					});
			}

	}(jQuery, window));
snippet ''
	' + ${1} + '${2}
snippet ""
	"' + ${1} + '"${2}
# jquery plugin for more complicated attached plugin
snippet jqp
	;(function ( $, window, undefined ) {

		var pluginName = '${1:plugin_name}',
				document = window.document,
				defaults = {
					propertyName: "value"
				};

		function Plugin( element, options ) {
			this.element = element;

			this.options = $.extend( {}, defaults, options) ;

			this._defaults = defaults;
			this._name = pluginName;

			this.init();
		}

		Plugin.prototype.init = function () {
		};

		$.fn[pluginName] = function ( options ) {
			return this.each(function () {
				if (!$.data(this, pluginName)) {
					$.data(this, pluginName, new Plugin( this, options ));
				}
			});
		}

	}(jQuery, window));
snippet $.ajax
	$.ajax({
		url: ${1},
		type: '${2:GET}',
		data: ${3},
		error: function( jqXHR, textStatus, errorThrown ) {
			console.log(jqXHR, textStatus, errorThrown); 
		},
		success: function ( data, textStatus, jqXHR ) {
			${4}
		}
	});
# Prototype
snippet proto
	${1:class_name}.prototype.${2:method_name} =
	function(${3:first_argument}) {
		${4:// body...}
	};
# Function
snippet fun
	function ${1:function_name} (${2:argument}) {
		${3:// body...}
	}
# Anonymous Function
snippet f
	function(${1}) {${2}};
# if
snippet if
	if (${1:true}) {${2}};
# if ... else
snippet ife
	if (${1:true}) {${2}}
	else{${3}};
# tertiary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# switch
snippet switch
	switch(${1:expression}) {
		case '${3:case}':
			${4:// code}
			break;
		${5}
		default:
			${2:// code}
	}
# case
snippet case
	case '${1:case}':
		${2:// code}
		break;
	${3}
# for (...) {...}
snippet for
	for (var ${2:i} = 0; $2 < ${1:Things}.length; $2${3:++}) {
		${4:$1[$2]}
	};
# for (...) {...} (Improved Native For-Loop)
snippet forr
	for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2${3:--}) {
		${4:$1[$2]}
	};
# while (...) {...}
snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}
# do...while
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});
# Object Method
snippet :f
	${1:method_name}: function(${2:attribute}) {
		${4}
	}${3:,}
# setTimeout function
snippet timeout
	setTimeout(function() {${3}}${2}, ${1:10};
# Get Elements
snippet get
	getElementsBy${1:TagName}('${2}')${3}
# Get Element
snippet gett
	getElementBy${1:Id}('${2}')${3}
